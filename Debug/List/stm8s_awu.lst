###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM829/Feb/2016  15:32:52 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\ProjectPath\STMPath\AC100_a0\sys\src\stm8s_awu.c      #
#    Command line =  D:\ProjectPath\STMPath\AC100_a0\sys\src\stm8s_awu.c -e   #
#                    -Om --no_unroll --no_inline --no_tbaa --no_cross_call    #
#                    --debug --code_model small --data_model medium -o        #
#                    D:\ProjectPath\STMPath\AC100_a0\Debug\Obj\               #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\stm8\LIB\dlstm8smn.h" -lcN      #
#                    D:\ProjectPath\STMPath\AC100_a0\Debug\List\ -I           #
#                    D:\ProjectPath\STMPath\AC100_a0/user/\ -I                #
#                    D:\ProjectPath\STMPath\AC100_a0/user/src/\ -I            #
#                    D:\ProjectPath\STMPath\AC100_a0/user/inc/\ -I            #
#                    D:\ProjectPath\STMPath\AC100_a0/addon/\ -I               #
#                    D:\ProjectPath\STMPath\AC100_a0/addon/src/\ -I           #
#                    D:\ProjectPath\STMPath\AC100_a0/addon/inc/\ -I           #
#                    D:\ProjectPath\STMPath\AC100_a0/sys/\ -I                 #
#                    D:\ProjectPath\STMPath\AC100_a0/sys/inc/\ -I             #
#                    D:\ProjectPath\STMPath\AC100_a0/sys/src/\ -I             #
#                    D:\ProjectPath\STMPath\AC100_a0/lib/\ -I                 #
#                    D:\ProjectPath\STMPath\AC100_a0/lib/src/\ -I             #
#                    D:\ProjectPath\STMPath\AC100_a0/lib/inc/\ --vregs 16     #
#    List file    =  D:\ProjectPath\STMPath\AC100_a0\Debug\List\stm8s_awu.lst #
#    Object file  =  D:\ProjectPath\STMPath\AC100_a0\Debug\Obj\stm8s_awu.o    #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProjectPath\STMPath\AC100_a0\sys\src\stm8s_awu.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_awu.c
      4            * @author  MCD Application Team
      5            * @version V2.0.0
      6            * @date    25-February-2011
      7            * @brief   This file contains all the functions for the AWU peripheral.  
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_awu.h"
     24          
     25          /** @addtogroup STM8S_StdPeriph_Driver
     26            * @{
     27            */
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /* See also AWU_Timebase_TypeDef structure in stm8s_awu.h file :
     36                                    N   2   5   1   2   4   8   1   3   6   1   2   5   1   2   1   3
     37                                    O   5   0   m   m   m   m   6   2   4   2   5   1   s   s   2   0
     38                                    I   0   0   s   s   s   s   m   m   m   8   6   2           s   s
     39                                    T   u   u                   s   s   s   m   m   m
     40                                        s   s                               s   s   s
     41          */
     42          /** Contains the different values to write in the APR register (used by AWU_Init function) */
     43          CONST uint8_t APR_Array[17] =
     44              {
     45                  0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 61, 23, 23, 62
     46              };
     47          
     48          /** Contains the different values to write in the TBR register (used by AWU_Init function) */
     49          CONST uint8_t TBR_Array[17] =
     50              {
     51                  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 12, 14, 15, 15
     52              };
     53          
     54          /* Public functions ----------------------------------------------------------*/
     55          
     56          /**
     57            * @addtogroup AWU_Public_Functions
     58            * @{
     59            */
     60          
     61          /**
     62            * @brief  Deinitializes the AWU peripheral registers to their default reset
     63            * values.
     64            * @param  None
     65            * @retval None
     66            */
     67          void AWU_DeInit(void)
     68          {
     69              AWU->CSR = AWU_CSR_RESET_VALUE;
     70              AWU->APR = AWU_APR_RESET_VALUE;
     71              AWU->TBR = AWU_TBR_RESET_VALUE;
     72          }
     73          
     74          /**
     75            * @brief  Initializes the AWU peripheral according to the specified parameters.
     76            * @param   AWU_TimeBase : Time base selection (interval between AWU interrupts).
     77            * can be one of the values of @ref AWU_Timebase_TypeDef.
     78            * @retval None
     79            * @par Required preconditions:
     80            * The LS RC calibration must be performed before calling this function.
     81            */
     82          void AWU_Init(AWU_Timebase_TypeDef AWU_TimeBase)
     83          {
     84          
     85              /* Check parameter */
     86              assert_param(IS_AWU_TIMEBASE_OK(AWU_TimeBase));
     87          
     88              /* Enable the AWU peripheral */
     89              AWU->CSR |= AWU_CSR_AWUEN;
     90          
     91              /* Set the TimeBase */
     92              AWU->TBR &= (uint8_t)(~AWU_TBR_AWUTB);
     93              AWU->TBR |= TBR_Array[(uint8_t)AWU_TimeBase];
     94          
     95              /* Set the APR divider */
     96              AWU->APR &= (uint8_t)(~AWU_APR_APR);
     97              AWU->APR |= APR_Array[(uint8_t)AWU_TimeBase];
     98          
     99          }
    100          
    101          /**
    102            * @brief  Enable or disable the AWU peripheral.
    103            * @param   NewState Indicates the new state of the AWU peripheral.
    104            * @retval None
    105            * @par Required preconditions:
    106            * Initialisation of AWU and LS RC calibration must be done before.
    107            */
    108          void AWU_Cmd(FunctionalState NewState)
    109          {
    110              if (NewState != DISABLE)
    111              {
    112                  /* Enable the AWU peripheral */
    113                  AWU->CSR |= AWU_CSR_AWUEN;
    114              }
    115              else
    116              {
    117                  /* Disable the AWU peripheral */
    118                  AWU->CSR &= (uint8_t)(~AWU_CSR_AWUEN);
    119              }
    120          }
    121          
    122          /**
    123            * @brief  Update APR register with the measured LSI frequency.
    124            * @par Note on the APR calculation:
    125            * A is the integer part of lsifreqkhz/4 and x the decimal part.
    126            * x <= A/(1+2A) is equivalent to A >= x(1+2A) and also to 4A >= 4x(1+2A) [F1]
    127            * but we know that A + x = lsifreqkhz/4 ==> 4x = lsifreqkhz-4A
    128            * so [F1] can be written :
    129            * 4A >= (lsifreqkhz-4A)(1+2A)
    130            * @param   LSIFreqHz Low Speed RC frequency measured by timer (in Hz).
    131            * @retval None
    132            * @par Required preconditions:
    133            * - AWU must be disabled to avoid unwanted interrupts.
    134            */
    135          void AWU_LSICalibrationConfig(uint32_t LSIFreqHz)
    136          {
    137          
    138              uint16_t lsifreqkhz = 0x0;
    139              uint16_t A = 0x0;
    140          
    141              /* Check parameter */
    142              assert_param(IS_LSI_FREQUENCY_OK(LSIFreqHz));
    143          
    144              lsifreqkhz = (uint16_t)(LSIFreqHz / 1000); /* Converts value in kHz */
    145          
    146              /* Calculation of AWU calibration value */
    147          
    148              A = (uint16_t)(lsifreqkhz >> 2U); /* Division by 4, keep integer part only */
    149          
    150              if ((4U * A) >= ((lsifreqkhz - (4U * A)) * (1U + (2U * A))))
    151              {
    152                  AWU->APR = (uint8_t)(A - 2U);
    153              }
    154              else
    155              {
    156                  AWU->APR = (uint8_t)(A - 1U);
    157              }
    158          }
    159          
    160          /**
    161            * @brief  Configures AWU in Idle mode to reduce power consumption.
    162            * @param  None
    163            * @retval None
    164            */
    165          void AWU_IdleModeEnable(void)
    166          {
    167              /* Disable AWU peripheral */
    168              AWU->CSR &= (uint8_t)(~AWU_CSR_AWUEN);
    169          
    170              /* No AWU timebase */
    171              AWU->TBR = (uint8_t)(~AWU_TBR_AWUTB);
    172          }
    173          
    174          /**
    175            * @brief  Returns status of the AWU peripheral flag.
    176            * @param  None
    177            * @retval FlagStatus : Status of the AWU flag.
    178            * This parameter can be any of the @ref FlagStatus enumeration.
    179            */
    180          FlagStatus AWU_GetFlagStatus(void)
    181          {
    182              return((FlagStatus)(((uint8_t)(AWU->CSR & AWU_CSR_AWUF) == (uint8_t)0x00) ? RESET : SET));
    183          }
    184          
    185          
    186          /**
    187            * @}
    188            */
    189            
    190          /**
    191            * @}
    192            */
    193            
    194          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label           Bytes
     --------------           -----
     APR_Array                  17
     TBR_Array                  17
     AWU_DeInit                 13
     AWU_Init                   46
     AWU_Cmd                    13
     AWU_LSICalibrationConfig   56
     AWU_IdleModeEnable          9
     AWU_GetFlagStatus           9

 
  34 bytes in section .near.rodata
 146 bytes in section .near_func.text
 
 146 bytes of CODE  memory
  34 bytes of CONST memory

Errors: none
Warnings: none
