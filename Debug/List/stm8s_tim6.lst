###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM810/Apr/2015  11:29:26 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\STMPath\26X9010(MPP 2IN1)\lib\src\stm8s_tim6.c        #
#    Command line =  "D:\STMPath\26X9010(MPP 2IN1)\lib\src\stm8s_tim6.c" -e   #
#                    -Ohz --debug --code_model small --data_model medium -o   #
#                    "D:\STMPath\26X9010(MPP 2IN1)\Debug\Obj\" --dlib_config  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\stm8\LIB\dlstm8smn.h" -lcN                    #
#                    "D:\STMPath\26X9010(MPP 2IN1)\Debug\List\" -I            #
#                    "D:\STMPath\26X9010(MPP 2IN1)/user/\" -I                 #
#                    "D:\STMPath\26X9010(MPP 2IN1)/user/src/\" -I             #
#                    "D:\STMPath\26X9010(MPP 2IN1)/user/inc/\" -I             #
#                    "D:\STMPath\26X9010(MPP 2IN1)/addon/\" -I                #
#                    "D:\STMPath\26X9010(MPP 2IN1)/addon/src/\" -I            #
#                    "D:\STMPath\26X9010(MPP 2IN1)/addon/inc/\" -I            #
#                    "D:\STMPath\26X9010(MPP 2IN1)/sys/\" -I                  #
#                    "D:\STMPath\26X9010(MPP 2IN1)/sys/inc/\" -I              #
#                    "D:\STMPath\26X9010(MPP 2IN1)/sys/src/\" -I              #
#                    "D:\STMPath\26X9010(MPP 2IN1)/lib/\" -I                  #
#                    "D:\STMPath\26X9010(MPP 2IN1)/lib/src/\" -I              #
#                    "D:\STMPath\26X9010(MPP 2IN1)/lib/inc/\" --vregs 16      #
#    List file    =  D:\STMPath\26X9010(MPP 2IN1)\Debug\List\stm8s_tim6.lst   #
#    Object file  =  D:\STMPath\26X9010(MPP 2IN1)\Debug\Obj\stm8s_tim6.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\STMPath\26X9010(MPP 2IN1)\lib\src\stm8s_tim6.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_tim6.c
      4            * @author  MCD Application Team
      5            * @version V2.0.0
      6            * @date    25-February-2011
      7            * @brief   This file contains all the functions for the TIM6 peripheral.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm8s_tim6.h"
     25          
     26          /** @addtogroup STM8S_StdPeriph_Driver
     27            * @{
     28            */
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          
     32          
     33          /** @addtogroup STM8S_StdPeriph_Driver
     34            * @{
     35            */
     36          /* Private typedef -----------------------------------------------------------*/
     37          /* Private define ------------------------------------------------------------*/
     38          /* Private macro -------------------------------------------------------------*/
     39          /* Private variables ---------------------------------------------------------*/
     40          /* Private function prototypes -----------------------------------------------*/
     41          /**
     42            * @addtogroup TIM6_Public_Functions
     43            * @{
     44            */
     45          
     46          /**
     47            * @brief  Deinitializes the TIM6 peripheral registers to their default reset values.
     48            * @param  None
     49            * @retval None
     50            */
     51          void TIM6_DeInit(void)
     52          {
     53              TIM6->CR1 	= TIM6_CR1_RESET_VALUE;
     54              TIM6->CR2 	= TIM6_CR2_RESET_VALUE;
     55              TIM6->SMCR 	= TIM6_SMCR_RESET_VALUE;
     56              TIM6->IER 	= TIM6_IER_RESET_VALUE;
     57              TIM6->CNTR 	= TIM6_CNTR_RESET_VALUE;
     58              TIM6->PSCR	= TIM6_PSCR_RESET_VALUE;
     59              TIM6->ARR 	= TIM6_ARR_RESET_VALUE;
     60              TIM6->SR1 	= TIM6_SR1_RESET_VALUE;
     61          }
     62          
     63          /**
     64            * @brief  Initializes the TIM6 Time Base Unit according to the specified
     65            * parameters.
     66            * @param   TIM6_Prescaler : This parameter can be any of the @Ref TIM5_Prescaler_TypeDef enumeration.
     67            * @param   TIM6_Period : This parameter must be a value between 0x00 and 0xFF.
     68            * @retval None
     69            */
     70          
     71          void TIM6_TimeBaseInit(TIM6_Prescaler_TypeDef TIM6_Prescaler,
     72                                 uint8_t TIM6_Period)
     73          {
     74              /* Check TIM6 prescaler value */
     75              assert_param(IS_TIM6_PRESCALER_OK(TIM6_Prescaler));
     76              /* Set the Autoreload value */
     77              TIM6->ARR = (uint8_t)(TIM6_Period);
     78              /* Set the Prescaler value */
     79              TIM6->PSCR = (uint8_t)(TIM6_Prescaler);
     80          }
     81          
     82          /**
     83            * @brief  Enables or disables the TIM6 peripheral.
     84            * @param   NewState : The new state of the TIM6 peripheral.
     85            * This parameter can be any of the @ref FunctionalState enumeration.
     86            * @retval None
     87            */
     88          void TIM6_Cmd(FunctionalState NewState)
     89          {
     90              /* Check the parameters */
     91              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
     92          
     93              /* set or Reset the CEN Bit */
     94              if (NewState == ENABLE)
     95              {
     96                  TIM6->CR1 |= TIM6_CR1_CEN ;
     97              }
     98              else
     99              {
    100                  TIM6->CR1 &= (uint8_t)(~TIM6_CR1_CEN) ;
    101              }
    102          }
    103          
    104          /**
    105            * @brief  Enables or Disables the TIM6 Update event.
    106            * @param   NewState : The new state of the TIM6 peripheral Preload register.
    107            * This parameter can be any of the @ref FunctionalState enumeration.
    108            * @retval None
    109            */
    110          void TIM6_UpdateDisableConfig(FunctionalState NewState)
    111          {
    112              /* Check the parameters */
    113              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    114          
    115              /* Set or Reset the UDIS Bit */
    116              if (NewState == ENABLE)
    117              {
    118                  TIM6->CR1 |= TIM6_CR1_UDIS ;
    119              }
    120              else
    121              {
    122                  TIM6->CR1 &= (uint8_t)(~TIM6_CR1_UDIS) ;
    123              }
    124          }
    125          
    126          /**
    127            * @brief  Selects the TIM6 Update Request Interrupt source.
    128            * @param   TIM6_UpdateSource : Specifies the Update source.
    129            * This parameter can be one of the @ref TIM6_UpdateSource_TypeDef enumeration.
    130            * @retval None
    131            */
    132          void TIM6_UpdateRequestConfig(TIM6_UpdateSource_TypeDef TIM6_UpdateSource)
    133          {
    134              /* Check the parameters */
    135              assert_param(IS_TIM6_UPDATE_SOURCE_OK(TIM6_UpdateSource));
    136          
    137              /* Set or Reset the URS Bit */
    138              if (TIM6_UpdateSource == TIM6_UPDATESOURCE_REGULAR)
    139              {
    140                  TIM6->CR1 |= TIM6_CR1_URS ;
    141              }
    142              else
    143              {
    144                  TIM6->CR1 &= (uint8_t)(~TIM6_CR1_URS) ;
    145              }
    146          }
    147          
    148          /**
    149            * @brief  Selects the TIM6’s One Pulse Mode.
    150            * @param   TIM6_OPMode : Specifies the OPM Mode to be used.
    151            * This parameter can be one of the @ref TIM6_OPMode_TypeDef enumeration.
    152            * @retval None
    153            */
    154          void TIM6_SelectOnePulseMode(TIM6_OPMode_TypeDef TIM6_OPMode)
    155          {
    156              /* Check the parameters */
    157              assert_param(IS_TIM6_OPM_MODE_OK(TIM6_OPMode));
    158          
    159              /* Set or Reset the OPM Bit */
    160              if (TIM6_OPMode == TIM6_OPMODE_SINGLE)
    161              {
    162                  TIM6->CR1 |= TIM6_CR1_OPM ;
    163              }
    164              else
    165              {
    166                  TIM6->CR1 &= (uint8_t)(~TIM6_CR1_OPM) ;
    167              }
    168          
    169          }
    170          
    171          /**
    172            * @brief  Configures the TIM6 Prescaler.
    173            * @param   Prescaler : Specifies the Prescaler Register value
    174            * This parameter can be one of the @ref TIM6_Prescaler_TypeDef enumeration.
    175            * @param   TIM6_PSCReloadMode : Specifies the TIM6 Prescaler Reload mode.
    176            * This parameter can be one of the @ref TIM6_PSCReloadMode_TypeDef enumeration.
    177            * @retval None
    178            */
    179          void TIM6_PrescalerConfig(TIM6_Prescaler_TypeDef Prescaler,
    180                                    TIM6_PSCReloadMode_TypeDef TIM6_PSCReloadMode)
    181          {
    182              /* Check the parameters */
    183              assert_param(IS_TIM6_PRESCALER_RELOAD_OK(TIM6_PSCReloadMode));
    184              assert_param(IS_TIM6_PRESCALER_OK(Prescaler));
    185          
    186              /* Set the Prescaler value */
    187              TIM6->PSCR = (uint8_t)Prescaler;
    188          
    189              /* Set or reset the UG Bit */
    190              if (TIM6_PSCReloadMode == TIM6_PSCRELOADMODE_IMMEDIATE)
    191              {
    192                  TIM6->EGR |= TIM6_EGR_UG ;
    193              }
    194              else
    195              {
    196                  TIM6->EGR &= (uint8_t)(~TIM6_EGR_UG) ;
    197              }
    198          }
    199          
    200          /**
    201            * @brief  Enables or disables TIM6 peripheral Preload register on ARR.
    202            * @param   NewState : The new state of the TIM6 peripheral Preload register.
    203            * This parameter can be any of the @ref FunctionalState enumeration.
    204            * @retval None
    205            */
    206          void TIM6_ARRPreloadConfig(FunctionalState NewState)
    207          {
    208              /* Check the parameters */
    209              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    210          
    211              /* Set or Reset the ARPE Bit */
    212              if (NewState == ENABLE)
    213              {
    214                  TIM6->CR1 |= TIM6_CR1_ARPE ;
    215              }
    216              else
    217              {
    218                  TIM6->CR1 &= (uint8_t)(~TIM6_CR1_ARPE) ;
    219              }
    220          }
    221          
    222          /**
    223            * @brief  Sets the TIM6 Counter Register value.
    224            * @param   Counter : Specifies the Counter register new value.
    225            * This parameter is between 0x00 and 0xFF.
    226            * @retval None
    227            */
    228          void TIM6_SetCounter(uint8_t Counter)
    229          {
    230              /* Set the Counter Register value */
    231              TIM6->CNTR = (uint8_t)(Counter);
    232          }
    233          
    234          /**
    235            * @brief  Sets the TIM6 Autoreload Register value.
    236            * @param   Autoreload : Specifies the Autoreload register new value.
    237            * This parameter is between 0x00 and 0xFF.
    238            * @retval None
    239            */
    240          void TIM6_SetAutoreload(uint8_t Autoreload)
    241          {
    242          
    243              /* Set the Autoreload Register value */
    244              TIM6->ARR = (uint8_t)(Autoreload);
    245          }
    246          
    247          /**
    248            * @brief  Gets the TIM6 Counter value.
    249            * @param  None
    250            * @retval uint8_t: Counter Register value.
    251            */
    252          uint8_t TIM6_GetCounter(void)
    253          {
    254              uint8_t tmpcntr=0;
    255              tmpcntr = TIM6->CNTR;
    256              /* Get the Counter Register value */
    257              return ((uint8_t)tmpcntr);
    258          }
    259          
    260          /**
    261            * @brief  Gets the TIM6 Prescaler value.
    262            * @param  None
    263            * @retval TIM6_Prescaler_TypeDef : Prescaler Register configuration value.
    264            */
    265          TIM6_Prescaler_TypeDef TIM6_GetPrescaler(void)
    266          {
    267              /* Get the Prescaler Register value */
    268              return ((TIM6_Prescaler_TypeDef)TIM6->PSCR);
    269          }
    270          
    271          /**
    272            * @brief  Enables or disables the specified TIM6 interrupts.
    273            * @param   TIM6_IT : Specifies the TIM6 interrupts sources to be enabled or disabled.
    274            * This parameter can be any combination of the @ref TIM6_IT_TypeDef enumeration.
    275            * @param   NewState : The new state of the TIM6 peripheral.
    276          	* This parameter can be any of the @ref FunctionalState enumeration.
    277            * @retval None
    278            * @par Required preconditions:
    279            * If QST option bit is enabled, the TIM6 Interrupt vector will be mapped on IRQ number 2 (irq0).
    280            * Otherwise, it will be mapped on IRQ number 27 (irq25).
    281            */
    282          void TIM6_ITConfig(TIM6_IT_TypeDef TIM6_IT, FunctionalState NewState)
    283          {
    284              /* Check the parameters */
    285              assert_param(IS_TIM6_IT_OK(TIM6_IT));
    286              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    287          
    288              if (NewState == ENABLE)
    289              {
    290                  /* Enable the Interrupt sources */
    291                  TIM6->IER |= (uint8_t)TIM6_IT;
    292              }
    293              else
    294              {
    295                  /* Disable the Interrupt sources */
    296                  TIM6->IER &= (uint8_t)(~(uint8_t)TIM6_IT);
    297              }
    298          }
    299          
    300          /**
    301            * @brief  Clears the TIM’s pending flags.
    302            * @param   TIM6_FLAG : Specifies the flag to clear.
    303            * This parameter can be one of the @ref TIM6_FLAG_TypeDef enumeration.
    304            * @retval None
    305            */
    306          void TIM6_ClearFlag(TIM6_FLAG_TypeDef TIM6_FLAG)
    307          {
    308              /* Check the parameters */
    309              assert_param(IS_TIM6_CLEAR_FLAG_OK((uint8_t)TIM6_FLAG));
    310              /* Clear the flags (rc_w0) clear this bit by writing 0. Writing ??has no effect*/
    311              TIM6->SR1 &= (uint8_t)(~((uint8_t)TIM6_FLAG));
    312          }
    313          
    314          /**
    315            * @brief  Checks whether the TIM6 interrupt has occurred or not.
    316            * @param   TIM6_IT : Specifies the TIM6 interrupt source to check.
    317            * This parameter can be one of the @ref TIM6_IT_TypeDef enumeration.
    318            * @retval ITStatus : The new state of the TIM6_IT.
    319          	* This parameter can be any of the @ref ITStatus enumeration.
    320            */
    321          
    322          ITStatus TIM6_GetITStatus(TIM6_IT_TypeDef TIM6_IT)
    323          {
    324              ITStatus bitstatus = RESET;
    325              uint8_t itStatus = 0, itEnable = 0;
    326          
    327              /* Check the parameters */
    328              assert_param(IS_TIM6_GET_IT_OK(TIM6_IT));
    329          
    330              itStatus = (uint8_t)(TIM6->SR1 & (uint8_t)TIM6_IT);
    331          
    332              itEnable = (uint8_t)(TIM6->IER & (uint8_t)TIM6_IT);
    333          
    334              if ((itStatus != (uint8_t)RESET ) && (itEnable != (uint8_t)RESET ))
    335              {
    336                  bitstatus = (ITStatus)SET;
    337              }
    338              else
    339              {
    340                  bitstatus = (ITStatus)RESET;
    341              }
    342              return ((ITStatus)bitstatus);
    343          }
    344          
    345          /**
    346            * @brief  Configures the TIM6 event to be generated by software.
    347            * @param   TIM6_EventSource : Specifies the event source.
    348            * This parameter can be one of the @ref TIM6_EventSource_TypeDef enumeration.
    349            * @retval None
    350            */
    351          void TIM6_GenerateEvent(TIM6_EventSource_TypeDef TIM6_EventSource)
    352          {
    353              /* Check the parameters */
    354              assert_param(IS_TIM6_EVENT_SOURCE_OK((uint8_t)TIM6_EventSource));
    355          
    356              /* Set the event sources */
    357              TIM6->EGR |= (uint8_t)TIM6_EventSource;
    358          }
    359          
    360          /**
    361            * @brief  Checks whether the specified TIM6 flag is set or not.
    362            * @param   TIM6_FLAG : Specifies the flag to check.
    363            * This parameter can be one of the @ref TIM6_FLAG_TypeDef enumeration.
    364            * @retval FlagStatus : The new state of TIM6_FLAG.
    365          	* This parameter can be any of the @ref FlagStatus enumeration.
    366            */
    367          FlagStatus TIM6_GetFlagStatus(TIM6_FLAG_TypeDef TIM6_FLAG)
    368          {
    369              volatile FlagStatus bitstatus = RESET;
    370          
    371              /* Check the parameters */
    372              assert_param(IS_TIM6_GET_FLAG_OK(TIM6_FLAG));
    373          
    374              if ((TIM6->SR1 & (uint8_t)TIM6_FLAG)  != 0)
    375              {
    376                  bitstatus = SET;
    377              }
    378              else
    379              {
    380                  bitstatus = RESET;
    381              }
    382              return ((FlagStatus)bitstatus);
    383          }
    384          
    385          /**
    386            * @brief  Clears the TIM6's interrupt pending bits.
    387            * @param   TIM6_IT : Specifies the pending bit to clear.
    388           * This parameter can be one of the @ref TIM6_IT_TypeDef enumeration.
    389            * @retval None
    390            */
    391          void TIM6_ClearITPendingBit(TIM6_IT_TypeDef TIM6_IT)
    392          {
    393              /* Check the parameters */
    394              assert_param(IS_TIM6_IT_OK(TIM6_IT));
    395          
    396              /* Clear the IT pending Bit */
    397              TIM6->SR1 &= (uint8_t)(~(uint8_t)TIM6_IT);
    398          }
    399          
    400          /**
    401            * @brief  Selects the TIM6 Trigger Output Mode.
    402            * @param   TIM6_TRGOSource : Specifies the Trigger Output source.
    403            * This parameter can be one of the @ref TIM6_TRGOSource_TypeDef enumeration.
    404            * @retval None
    405            */
    406          void TIM6_SelectOutputTrigger(TIM6_TRGOSource_TypeDef TIM6_TRGOSource)
    407          {
    408              uint8_t tmpcr2 = 0;
    409          
    410              /* Check the parameters */
    411              assert_param(IS_TIM6_TRGO_SOURCE_OK(TIM6_TRGOSource));
    412          
    413              tmpcr2 = TIM6->CR2;
    414          
    415              /* Reset the MMS Bits */
    416              tmpcr2 &= (uint8_t)(~TIM6_CR2_MMS);
    417          
    418              /* Select the TRGO source */
    419              tmpcr2 |=  (uint8_t)TIM6_TRGOSource;
    420          
    421              TIM6->CR2 = tmpcr2;
    422          }
    423          
    424          /**
    425            * @brief  Sets or Resets the TIM6 Master/Slave Mode.
    426            * @param   NewState : The new state of the synchronization between TIM6 and its slaves (through TRGO).
    427          	* This parameter can be any of the @ref FunctionalState enumeration.
    428            * @retval None
    429            */
    430          
    431          void TIM6_SelectMasterSlaveMode(FunctionalState NewState)
    432          {
    433              /* Check the parameters */
    434              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    435          
    436              /* Set or Reset the MSM Bit */
    437              if (NewState == ENABLE)
    438              {
    439                  TIM6->SMCR |= TIM6_SMCR_MSM;
    440              }
    441              else
    442              {
    443                  TIM6->SMCR &= (uint8_t)(~TIM6_SMCR_MSM);
    444              }
    445          }
    446          
    447          /**
    448            * @brief  Selects the TIM6 Input Trigger source.
    449            * @param   TIM6_InputTriggerSource : Specifies Input Trigger source.
    450            * This parameter can be one of the @ref TIM6_TS_TypeDef enumeration.
    451            * @retval None
    452            */
    453          void TIM6_SelectInputTrigger(TIM6_TS_TypeDef TIM6_InputTriggerSource)
    454          {
    455              uint8_t tmpsmcr = 0;
    456          
    457              /* Check the parameters */
    458              assert_param(IS_TIM6_TRIGGER_SELECTION_OK(TIM6_InputTriggerSource));
    459          
    460              tmpsmcr = TIM6->SMCR;
    461          
    462              /* Select the Tgigger Source */
    463              tmpsmcr &= (uint8_t)(~TIM6_SMCR_TS);
    464              tmpsmcr |= (uint8_t)TIM6_InputTriggerSource;
    465          
    466              TIM6->SMCR = (uint8_t)tmpsmcr;
    467          }
    468          
    469          /**
    470            * @brief  Enables the TIM6 internal Clock.
    471            * @param  None
    472            * @retval None
    473            */
    474          void TIM6_InternalClockConfig(void)
    475          {
    476              /* Disable slave mode to clock the prescaler directly with the internal clock */
    477              TIM6->SMCR &=  (uint8_t)(~TIM6_SMCR_SMS);
    478          }
    479          
    480          /**
    481            * @brief  Selects the TIM6 Slave Mode.
    482            * @param   TIM6_SlaveMode : Specifies the TIM6 Slave Mode.
    483            * This parameter can be one of the @ref TIM6_SlaveMode_TypeDef enumeration.
    484            * @retval None
    485            */
    486          void TIM6_SelectSlaveMode(TIM6_SlaveMode_TypeDef TIM6_SlaveMode)
    487          {
    488              uint8_t tmpsmcr = 0;
    489          
    490              /* Check the parameters */
    491              assert_param(IS_TIM6_SLAVE_MODE_OK(TIM6_SlaveMode));
    492          
    493              tmpsmcr = TIM6->SMCR;
    494          
    495              /* Reset the SMS Bits */
    496              tmpsmcr &= (uint8_t)(~TIM6_SMCR_SMS);
    497          
    498              /* Select the Slave Mode */
    499              tmpsmcr |= (uint8_t)TIM6_SlaveMode;
    500          
    501              TIM6->SMCR = tmpsmcr;
    502          }
    503          
    504          /**
    505            * @}
    506            */
    507            
    508          /**
    509            * @}
    510            */
    511            
    512          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

Errors: 30
Warnings: none
