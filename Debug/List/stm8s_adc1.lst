###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM811/Apr/2015  10:45:32 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\STMPath\26X9010(MPP 2IN1)\lib\src\stm8s_adc1.c        #
#    Command line =  "D:\STMPath\26X9010(MPP 2IN1)\lib\src\stm8s_adc1.c" -e   #
#                    -Ohz --debug --code_model small --data_model medium -o   #
#                    "D:\STMPath\26X9010(MPP 2IN1)\Debug\Obj\" --dlib_config  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\stm8\LIB\dlstm8smn.h" -lcN                    #
#                    "D:\STMPath\26X9010(MPP 2IN1)\Debug\List\" -I            #
#                    "D:\STMPath\26X9010(MPP 2IN1)/user/\" -I                 #
#                    "D:\STMPath\26X9010(MPP 2IN1)/user/src/\" -I             #
#                    "D:\STMPath\26X9010(MPP 2IN1)/user/inc/\" -I             #
#                    "D:\STMPath\26X9010(MPP 2IN1)/addon/\" -I                #
#                    "D:\STMPath\26X9010(MPP 2IN1)/addon/src/\" -I            #
#                    "D:\STMPath\26X9010(MPP 2IN1)/addon/inc/\" -I            #
#                    "D:\STMPath\26X9010(MPP 2IN1)/sys/\" -I                  #
#                    "D:\STMPath\26X9010(MPP 2IN1)/sys/inc/\" -I              #
#                    "D:\STMPath\26X9010(MPP 2IN1)/sys/src/\" -I              #
#                    "D:\STMPath\26X9010(MPP 2IN1)/lib/\" -I                  #
#                    "D:\STMPath\26X9010(MPP 2IN1)/lib/src/\" -I              #
#                    "D:\STMPath\26X9010(MPP 2IN1)/lib/inc/\" --vregs 16      #
#    List file    =  D:\STMPath\26X9010(MPP 2IN1)\Debug\List\stm8s_adc1.lst   #
#    Object file  =  D:\STMPath\26X9010(MPP 2IN1)\Debug\Obj\stm8s_adc1.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\STMPath\26X9010(MPP 2IN1)\lib\src\stm8s_adc1.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_adc1.c
      4            * @author  MCD Application Team
      5            * @version V2.0.0
      6            * @date    25-February-2011
      7            * @brief   This file contains all the functions/macros for the ADC1 peripheral.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_adc1.h"
     24          
     25          /** @addtogroup STM8S_StdPeriph_Driver
     26            * @{
     27            */
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /* Public functions ----------------------------------------------------------*/
     36          
     37          /**
     38            * @addtogroup ADC1_Public_Functions
     39            * @{
     40            */
     41          
     42          /**
     43            * @brief  Deinitializes the ADC1 peripheral registers to their default reset
     44            * values.
     45            * @param  None
     46            * @retval None
     47            */
     48          void ADC1_DeInit(void)
     49          {
     50              ADC1->CSR  = ADC1_CSR_RESET_VALUE;
     51              ADC1->CR1  = ADC1_CR1_RESET_VALUE;
     52              ADC1->CR2  = ADC1_CR2_RESET_VALUE;
     53              ADC1->CR3  = ADC1_CR3_RESET_VALUE;
     54              ADC1->TDRH = ADC1_TDRH_RESET_VALUE;
     55              ADC1->TDRL = ADC1_TDRL_RESET_VALUE;
     56              ADC1->HTRH = ADC1_HTRH_RESET_VALUE;
     57              ADC1->HTRL = ADC1_HTRL_RESET_VALUE;
     58              ADC1->LTRH = ADC1_LTRH_RESET_VALUE;
     59              ADC1->LTRL = ADC1_LTRL_RESET_VALUE;
     60              ADC1->AWCRH = ADC1_AWCRH_RESET_VALUE;
     61              ADC1->AWCRL = ADC1_AWCRL_RESET_VALUE;
     62          }
     63          
     64          
     65          /**
     66            * @brief  Initializes the ADC1 peripheral according to the specified parameters
     67            * @param   ADC1_ConversionMode: specifies the conversion mode
     68            * can be one of the values of @ref ADC1_ConvMode_TypeDef.
     69            * @param   ADC1_Channel: specifies the channel to convert
     70            * can be one of the values of @ref ADC1_Channel_TypeDef.
     71            * @param   ADC1_PrescalerSelection: specifies the ADC1 prescaler
     72            * can be one of the values of @ref ADC1_PresSel_TypeDef.
     73            * @param   ADC1_ExtTrigger: specifies the external trigger
     74            * can be one of the values of @ref ADC1_ExtTrig_TypeDef.
     75            * @param   ADC1_ExtTriggerState: specifies the external trigger new state
     76            * can be one of the values of @ref FunctionalState.
     77            * @param   ADC1_Align: specifies the converted data alignment
     78            * can be one of the values of @ref ADC1_Align_TypeDef.
     79            * @param   ADC1_SchmittTriggerChannel: specifies the schmitt trigger channel
     80            * can be one of the values of @ref ADC1_SchmittTrigg_TypeDef.
     81            * @param   ADC1_SchmittTriggerState: specifies the schmitt trigger state
     82            * can be one of the values of @ref FunctionalState.
     83            * @retval None
     84            */
     85          void ADC1_Init(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_PresSel_TypeDef ADC1_PrescalerSelection, ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState ADC1_ExtTriggerState, ADC1_Align_TypeDef ADC1_Align, ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState ADC1_SchmittTriggerState)
     86          {
     87          
     88              /* Check the parameters */
     89              assert_param(IS_ADC1_CONVERSIONMODE_OK(ADC1_ConversionMode));
     90              assert_param(IS_ADC1_CHANNEL_OK(ADC1_Channel));
     91              assert_param(IS_ADC1_PRESSEL_OK(ADC1_PrescalerSelection));
     92              assert_param(IS_ADC1_EXTTRIG_OK(ADC1_ExtTrigger));
     93              assert_param(IS_FUNCTIONALSTATE_OK(((ADC1_ExtTriggerState))));
     94              assert_param(IS_ADC1_ALIGN_OK(ADC1_Align));
     95              assert_param(IS_ADC1_SCHMITTTRIG_OK(ADC1_SchmittTriggerChannel));
     96              assert_param(IS_FUNCTIONALSTATE_OK(ADC1_SchmittTriggerState));
     97          
     98              /*-----------------CR1 & CSR configuration --------------------*/
     99              /* Configure the conversion mode and the channel to convert
    100              respectively according to ADC1_ConversionMode & ADC1_Channel values  &  ADC1_Align values */
    101              ADC1_ConversionConfig(ADC1_ConversionMode, ADC1_Channel, ADC1_Align);
    102              /* Select the prescaler division factor according to ADC1_PrescalerSelection values */
    103              ADC1_PrescalerConfig(ADC1_PrescalerSelection);
    104          
    105              /*-----------------CR2 configuration --------------------*/
    106              /* Configure the external trigger state and event respectively
    107              according to NewState, ADC1_ExtTrigger */
    108              ADC1_ExternalTriggerConfig(ADC1_ExtTrigger, ADC1_ExtTriggerState);
    109          
    110              /*------------------TDR configuration ---------------------------*/
    111              /* Configure the schmitt trigger channel and state respectively
    112              according to ADC1_SchmittTriggerChannel & ADC1_SchmittTriggerNewState  values */
    113              ADC1_SchmittTriggerConfig(ADC1_SchmittTriggerChannel, ADC1_SchmittTriggerState);
    114          
    115              /* Enable the ADC1 peripheral */
    116              ADC1->CR1 |= ADC1_CR1_ADON;
    117          
    118          }
    119          
    120          
    121          /**
    122            * @brief  Enables or Disables the ADC1 peripheral.
    123            * @param   NewState: specifies the peripheral enabled or disabled state.
    124            * @retval None
    125            */
    126          void ADC1_Cmd(FunctionalState NewState)
    127          {
    128          
    129              /* Check the parameters */
    130              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    131          
    132              if (NewState != DISABLE)
    133              {
    134                  ADC1->CR1 |= ADC1_CR1_ADON;
    135              }
    136              else /* NewState == DISABLE */
    137              {
    138                  ADC1->CR1 &= (uint8_t)(~ADC1_CR1_ADON);
    139              }
    140          
    141          }
    142          
    143          /**
    144            * @brief  Enables or Disables the ADC1 scan mode.
    145            * @param   NewState: specifies the selected mode enabled or disabled state.
    146            * @retval None
    147            */
    148          void ADC1_ScanModeCmd(FunctionalState NewState)
    149          {
    150          
    151              /* Check the parameters */
    152              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    153          
    154              if (NewState != DISABLE)
    155              {
    156                  ADC1->CR2 |= ADC1_CR2_SCAN;
    157              }
    158              else /* NewState == DISABLE */
    159              {
    160                  ADC1->CR2 &= (uint8_t)(~ADC1_CR2_SCAN);
    161              }
    162          
    163          }
    164          
    165          /**
    166            * @brief  Enables or Disables the ADC1 data store into the Data Buffer registers rather than in the Data Register
    167            * @param   NewState: specifies the selected mode enabled or disabled state.
    168            * @retval None
    169            */
    170          void ADC1_DataBufferCmd(FunctionalState NewState)
    171          {
    172          
    173              /* Check the parameters */
    174              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    175          
    176              if (NewState != DISABLE)
    177              {
    178                  ADC1->CR3 |= ADC1_CR3_DBUF;
    179              }
    180              else /* NewState == DISABLE */
    181              {
    182                  ADC1->CR3 &= (uint8_t)(~ADC1_CR3_DBUF);
    183              }
    184          
    185          }
    186          
    187          /**
    188            * @brief  Enables or disables the ADC1 interrupt.
    189            * @param   ADC1_IT specifies the name of the interrupt to enable or disable.
    190            * This parameter can be one of the following values:
    191            *    - ADC1_IT_AWDITEN : Analog WDG interrupt enable
    192            *    - ADC1_IT_EOCITEN  : EOC iterrupt enable
    193            * @param   NewState specifies the state of the interrupt to apply.
    194            * @retval None
    195            */
    196          void ADC1_ITConfig(ADC1_IT_TypeDef ADC1_IT, FunctionalState NewState)
    197          {
    198          
    199              /* Check the parameters */
    200              assert_param(IS_ADC1_IT_OK(ADC1_IT));
    201              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    202          
    203              if (NewState != DISABLE)
    204              {
    205                  /* Enable the ADC1 interrupts */
    206                  ADC1->CSR |= (uint8_t)ADC1_IT;
    207              }
    208              else  /* NewState == DISABLE */
    209              {
    210                  /* Disable the ADC1 interrupts */
    211                  ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ADC1_IT);
    212              }
    213          
    214          }
    215          
    216          /**
    217            * @brief  Configure the ADC1 prescaler division factor.
    218            * @param   ADC1_Prescaler: the selected precaler.
    219            * It can be one of the values of @ref ADC1_PresSel_TypeDef.
    220            * @retval None
    221            */
    222          void ADC1_PrescalerConfig(ADC1_PresSel_TypeDef ADC1_Prescaler)
    223          {
    224          
    225              /* Check the parameter */
    226              assert_param(IS_ADC1_PRESSEL_OK(ADC1_Prescaler));
    227          
    228              /* Clear the SPSEL bits */
    229              ADC1->CR1 &= (uint8_t)(~ADC1_CR1_SPSEL);
    230              /* Select the prescaler division factor according to ADC1_PrescalerSelection values */
    231              ADC1->CR1 |= (uint8_t)(ADC1_Prescaler);
    232          
    233          }
    234          
    235          
    236          /**
    237            * @brief  Enables or disables the ADC1 Schmitt Trigger on a selected channel.
    238            * @param   ADC1_SchmittTriggerChannel specifies the desired Channel.
    239            * It can be set of the values of @ref ADC1_SchmittTrigg_TypeDef.
    240            * @param   NewState specifies Channel new status.
    241            * can have one of the values of @ref FunctionalState.
    242            * @retval None
    243            */
    244          void ADC1_SchmittTriggerConfig(ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState NewState)
    245          {
    246          
    247              /* Check the parameters */
    248              assert_param(IS_ADC1_SCHMITTTRIG_OK(ADC1_SchmittTriggerChannel));
    249              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    250          
    251              if (ADC1_SchmittTriggerChannel == ADC1_SCHMITTTRIG_ALL)
    252              {
    253                  if (NewState != DISABLE)
    254                  {
    255                      ADC1->TDRL &= (uint8_t)0x0;
    256                      ADC1->TDRH &= (uint8_t)0x0;
    257                  }
    258                  else /* NewState == DISABLE */
    259                  {
    260                      ADC1->TDRL |= (uint8_t)0xFF;
    261                      ADC1->TDRH |= (uint8_t)0xFF;
    262                  }
    263              }
    264              else if (ADC1_SchmittTriggerChannel < ADC1_SCHMITTTRIG_CHANNEL8)
    265              {
    266                  if (NewState != DISABLE)
    267                  {
    268                      ADC1->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel));
    269                  }
    270                  else /* NewState == DISABLE */
    271                  {
    272                      ADC1->TDRL |= (uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel);
    273                  }
    274              }
    275              else /* ADC1_SchmittTriggerChannel >= ADC1_SCHMITTTRIG_CHANNEL8 */
    276              {
    277                  if (NewState != DISABLE)
    278                  {
    279                      ADC1->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8)));
    280                  }
    281                  else /* NewState == DISABLE */
    282                  {
    283                      ADC1->TDRH |= (uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8));
    284                  }
    285              }
    286          
    287          }
    288          
    289          
    290          /**
    291            * @brief  Configure the ADC1 conversion on selected channel.
    292            * @param   ADC1_ConversionMode Specifies the conversion type.
    293            * It can be set of the values of @ref ADC1_ConvMode_TypeDef
    294            * @param   ADC1_Channel specifies the ADC1 Channel.
    295            * It can be set of the values of @ref ADC1_Channel_TypeDef
    296            * @param   ADC1_Align specifies the conerted data alignment.
    297            * It can be set of the values of @ref ADC1_Align_TypeDef
    298            * @retval None
    299            */
    300          void ADC1_ConversionConfig(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_Align_TypeDef ADC1_Align)
    301          {
    302          
    303              /* Check the parameters */
    304              assert_param(IS_ADC1_CONVERSIONMODE_OK(ADC1_ConversionMode));
    305              assert_param(IS_ADC1_CHANNEL_OK(ADC1_Channel));
    306              assert_param(IS_ADC1_ALIGN_OK(ADC1_Align));
    307          
    308              /* Clear the align bit */
    309              ADC1->CR2 &= (uint8_t)(~ADC1_CR2_ALIGN);
    310              /* Configure the data alignment */
    311              ADC1->CR2 |= (uint8_t)(ADC1_Align);
    312          
    313              if (ADC1_ConversionMode == ADC1_CONVERSIONMODE_CONTINUOUS)
    314              {
    315                  /* Set the continuous coversion mode */
    316                  ADC1->CR1 |= ADC1_CR1_CONT;
    317              }
    318              else /* ADC1_ConversionMode == ADC1_CONVERSIONMODE_SINGLE */
    319              {
    320                  /* Set the single conversion mode */
    321                  ADC1->CR1 &= (uint8_t)(~ADC1_CR1_CONT);
    322              }
    323          
    324              /* Clear the ADC1 channels */
    325              ADC1->CSR &= (uint8_t)(~ADC1_CSR_CH);
    326              /* Select the ADC1 channel */
    327              ADC1->CSR |= (uint8_t)(ADC1_Channel);
    328          
    329          }
    330          
    331          
    332          /**
    333            * @brief  Configure the ADC1 conversion on external trigger event.
    334            * @par Full description:
    335            * The selected external trigger evant can be enabled or disabled.
    336            * @param   ADC1_ExtTrigger to select the External trigger event.
    337            * can have one of the values of @ref ADC1_ExtTrig_TypeDef.
    338            * @param   NewState to enable/disable the selected external trigger
    339            * can have one of the values of @ref FunctionalState.
    340            * @retval None
    341            */
    342          void ADC1_ExternalTriggerConfig(ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState NewState)
    343          {
    344          
    345              /* Check the parameters */
    346              assert_param(IS_ADC1_EXTTRIG_OK(ADC1_ExtTrigger));
    347              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    348          
    349              /* Clear the external trigger selection bits */
    350              ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTSEL);
    351          
    352              if (NewState != DISABLE)
    353              {
    354                  /* Enable the selected external Trigger */
    355                  ADC1->CR2 |= (uint8_t)(ADC1_CR2_EXTTRIG);
    356              }
    357              else /* NewState == DISABLE */
    358              {
    359                  /* Disable the selected external trigger */
    360                  ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTTRIG);
    361              }
    362          
    363              /* Set the selected external trigger */
    364              ADC1->CR2 |= (uint8_t)(ADC1_ExtTrigger);
    365          
    366          }
    367          
    368          
    369          /**
    370            * @brief  Start ADC1 conversion
    371            * @par Full description:
    372            * This function  triggers the start of conversion, after ADC1 configuration.
    373            * @param  None
    374            * @retval None
    375            * @par Required preconditions:
    376            * Enable the ADC1 peripheral before calling this function
    377            */
    378          void ADC1_StartConversion(void)
    379          {
    380              ADC1->CR1 |= ADC1_CR1_ADON;
    381          }
    382          
    383          /**
    384            * @brief  Get one sample of measured signal.
    385            * @param  None
    386            * @retval ConversionValue:  value of the measured signal.
    387            * @par Required preconditions:
    388            * ADC1 conversion finished.
    389            */
    390          uint16_t ADC1_GetConversionValue(void)
    391          {
    392          
    393              uint16_t temph = 0;
    394              uint8_t templ = 0;
    395          
    396              if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
    397              {
    398                  /* Read LSB first */
    399                  templ = ADC1->DRL;
    400                  /* Then read MSB */
    401                  temph = ADC1->DRH;
    402          
    403                  temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
    404              }
    405              else /* Left alignment */
    406              {
    407                  /* Read MSB firts*/
    408                  temph = ADC1->DRH;
    409                  /* Then read LSB */
    410                  templ = ADC1->DRL;
    411          
    412                  temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)((uint16_t)temph << 8));
    413              }
    414          
    415              return ((uint16_t)temph);
    416          
    417          }
    418          
    419          /**
    420            * @brief  Enables or disables the analog watchdog for the given channel.
    421            * @param   Channel specifies the desired Channel.
    422            * It can be set of the values of @ref ADC1_Channel_TypeDef.
    423            * @param   NewState specifies the analog watchdog new state.
    424            * can have one of the values of @ref FunctionalState.
    425            * @retval None
    426            */
    427          void ADC1_AWDChannelConfig(ADC1_Channel_TypeDef Channel, FunctionalState NewState)
    428          {
    429              /* Check the parameters */
    430              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    431              assert_param(IS_ADC1_CHANNEL_OK(Channel));
    432          
    433              if (Channel < (uint8_t)8)
    434              {
    435                  if (NewState != DISABLE)
    436                  {
    437                      ADC1->AWCRL |= (uint8_t)((uint8_t)1 << Channel);
    438                  }
    439                  else /* NewState == DISABLE */
    440                  {
    441                      ADC1->AWCRL &= (uint8_t)~(uint8_t)((uint8_t)1 << Channel);
    442                  }
    443              }
    444              else
    445              {
    446                  if (NewState != DISABLE)
    447                  {
    448                      ADC1->AWCRH |= (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8));
    449                  }
    450                  else /* NewState == DISABLE */
    451                  {
    452                      ADC1->AWCRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (uint8_t)(Channel - (uint8_t)8));
    453                  }
    454              }
    455          }
    456          
    457          /**
    458            * @brief  Sets the high threshold of the analog watchdog.
    459            * @param   Threshold specifies the high threshold value.
    460            * this value depends on the reference voltage range.
    461            * @retval None
    462            */
    463          void ADC1_SetHighThreshold(uint16_t Threshold)
    464          {
    465              ADC1->HTRH = (uint8_t)(Threshold >> (uint8_t)2);
    466              ADC1->HTRL = (uint8_t)Threshold;
    467          }
    468          
    469          /**
    470            * @brief  Sets the low threshold of the analog watchdog.
    471            * @param   Threshold specifies the low threshold value.
    472            * this value depends on the reference voltage range.
    473            * @retval None
    474            */
    475          void ADC1_SetLowThreshold(uint16_t Threshold)
    476          {
    477              ADC1->LTRL = (uint8_t)Threshold;
    478              ADC1->LTRH = (uint8_t)(Threshold >> (uint8_t)2);
    479          }
    480          
    481          /**
    482            * @brief  Get one sample of measured signal.
    483            * @param   Buffer specifies the buffer to read.
    484            * @retval BufferValue:  value read from the given buffer.
    485            * @par Required preconditions:
    486            * ADC1 conversion finished.
    487            */
    488          uint16_t ADC1_GetBufferValue(uint8_t Buffer)
    489          {
    490          
    491              uint16_t temph = 0;
    492              uint8_t templ = 0;
    493          
    494              /* Check the parameters */
    495              assert_param(IS_ADC1_BUFFER_OK(Buffer));
    496          
    497              if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
    498              {
    499                  /* Read LSB first */
    500                  templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
    501                  /* Then read MSB */
    502                  temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
    503          
    504                  temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
    505              }
    506              else /* Left alignment */
    507              {
    508                  /* Read MSB firts*/
    509                  temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
    510                  /* Then read LSB */
    511                  templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
    512          
    513                  temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)(temph << 8));
    514              }
    515          
    516              return ((uint16_t)temph);
    517          
    518          }
    519          
    520          /**
    521            * @brief  Checks the specified analog watchdog channel status.
    522            * @param   Channel: specify the channel of which to check the analog watchdog
    523            * can be one of the values of @ref ADC1_Channel_TypeDef.
    524            * @retval FlagStatus Status of the analog watchdog.
    525            */
    526          FlagStatus ADC1_GetAWDChannelStatus(ADC1_Channel_TypeDef Channel)
    527          {
    528              uint8_t status = 0;
    529          
    530              /* Check the parameters */
    531              assert_param(IS_ADC1_CHANNEL_OK(Channel));
    532          
    533              if (Channel < (uint8_t)8)
    534              {
    535                  status = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << Channel));
    536              }
    537              else /* Channel = 8 | 9 */
    538              {
    539                  status = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8)));
    540              }
    541          
    542              return ((FlagStatus)status);
    543          }
    544          
    545          /**
    546            * @brief  Checks the specified ADC1 flag status.
    547            * @param   Flag: ADC1 flag.
    548            * can be one of the values of @ref ADC1_Flag_TypeDef.
    549            * @retval FlagStatus Status of the ADC1 flag.
    550            */
    551          FlagStatus ADC1_GetFlagStatus(ADC1_Flag_TypeDef Flag)
    552          {
    553              uint8_t flagstatus = 0;
    554              uint8_t temp = 0;
    555          
    556              /* Check the parameters */
    557              assert_param(IS_ADC1_FLAG_OK(Flag));
    558          
    559              if ((Flag & 0x0F) == 0x01)
    560              {
    561                  /* Get OVR flag status */
    562                  flagstatus = (uint8_t)(ADC1->CR3 & ADC1_CR3_OVR);
    563              }
    564              else if ((Flag & 0xF0) == 0x10)
    565              {
    566                  /* Get analog watchdog channel status */
    567                  temp = (uint8_t)(Flag & (uint8_t)0x0F);
    568                  if (temp < 8)
    569                  {
    570                      flagstatus = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
    571                  }
    572                  else
    573                  {
    574                      flagstatus = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
    575                  }
    576              }
    577              else  /* Get EOC | AWD flag status */
    578              {
    579                  flagstatus = (uint8_t)(ADC1->CSR & Flag);
    580              }
    581              return ((FlagStatus)flagstatus);
    582          
    583          }
    584          
    585          /**
    586            * @brief  Clear the specified ADC1 Flag.
    587            * @param   Flag: ADC1 flag.
    588            * can be one of the values of @ref ADC1_Flag_TypeDef.
    589            * @retval None
    590            */
    591          void ADC1_ClearFlag(ADC1_Flag_TypeDef Flag)
    592          {
    593              uint8_t temp = 0;
    594          
    595              /* Check the parameters */
    596              assert_param(IS_ADC1_FLAG_OK(Flag));
    597          
    598              if ((Flag & 0x0F) == 0x01)
    599              {
    600                  /* Clear OVR flag status */
    601                  ADC1->CR3 &= (uint8_t)(~ADC1_CR3_OVR);
    602              }
    603              else if ((Flag & 0xF0) == 0x10)
    604              {
    605                  /* Clear analog watchdog channel status */
    606                  temp = (uint8_t)(Flag & (uint8_t)0x0F);
    607                  if (temp < 8)
    608                  {
    609                      ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
    610                  }
    611                  else
    612                  {
    613                      ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
    614                  }
    615              }
    616              else  /* Clear EOC | AWD flag status */
    617              {
    618                  ADC1->CSR &= (uint8_t) (~Flag);
    619              }
    620          }
    621          
    622          /**
    623            * @brief  Returns the specified pending bit status
    624            * @param   ITPendingBit : the IT pending bit to check.
    625            * This parameter can be one of the following values:
    626            *    - ADC1_IT_AWD   : Analog WDG IT status
    627            *    - ADC1_IT_AWS0 : Analog channel 0 IT status
    628            *    - ADC1_IT_AWS1 : Analog channel 1 IT status
    629            *    - ADC1_IT_AWS2 : Analog channel 2 IT status
    630            *    - ADC1_IT_AWS3 : Analog channel 3 IT status
    631            *    - ADC1_IT_AWS4 : Analog channel 4 IT status
    632            *    - ADC1_IT_AWS5 : Analog channel 5 IT status
    633            *    - ADC1_IT_AWS6 : Analog channel 6 IT status
    634            *    - ADC1_IT_AWS7 : Analog channel 7 IT status
    635            *    - ADC1_IT_AWS8 : Analog channel 8 IT status
    636            *    - ADC1_IT_AWS9 : Analog channel 9 IT status
    637            *    - ADC1_IT_EOC    : EOC pending bit
    638            * @retval ITStatus: status of the specified pending bit.
    639            */
    640          ITStatus ADC1_GetITStatus(ADC1_IT_TypeDef ITPendingBit)
    641          {
    642              ITStatus itstatus = RESET;
    643              uint8_t temp = 0;
    644          
    645              /* Check the parameters */
    646              assert_param(IS_ADC1_ITPENDINGBIT_OK(ITPendingBit));
    647          
    648              if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
    649              {
    650                  /* Get analog watchdog channel status */
    651                  temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
    652                  if (temp < 8)
    653                  {
    654                      itstatus = (ITStatus)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
    655                  }
    656                  else
    657                  {
    658                      itstatus = (ITStatus)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
    659                  }
    660              }
    661              else  /* Get EOC | AWD flag status */
    662              {
    663                  itstatus = (ITStatus)(ADC1->CSR & (uint8_t)ITPendingBit);
    664              }
    665              return ((ITStatus)itstatus);
    666          
    667          }
    668          
    669          /**
    670            * @brief  Clear the ADC1 End of Conversion pending bit.
    671            * @param   ITPendingBit : the IT pending bit to clear.
    672            * This parameter can be one of the following values:
    673            *    - ADC1_IT_AWD   : Analog WDG IT status
    674            *    - ADC1_IT_AWS0 : Analog channel 0 IT status
    675            *    - ADC1_IT_AWS1 : Analog channel 1 IT status
    676            *    - ADC1_IT_AWS2 : Analog channel 2 IT status
    677            *    - ADC1_IT_AWS3 : Analog channel 3 IT status
    678            *    - ADC1_IT_AWS4 : Analog channel 4 IT status
    679            *    - ADC1_IT_AWS5 : Analog channel 5 IT status
    680            *    - ADC1_IT_AWS6 : Analog channel 6 IT status
    681            *    - ADC1_IT_AWS7 : Analog channel 7 IT status
    682            *    - ADC1_IT_AWS8 : Analog channel 8 IT status
    683            *    - ADC1_IT_AWS9 : Analog channel 9 IT status
    684            *    - ADC1_IT_EOC  : EOC pending bit
    685            * @retval None
    686            */
    687          void ADC1_ClearITPendingBit(ADC1_IT_TypeDef ITPendingBit)
    688          {
    689              uint8_t temp = 0;
    690          
    691              /* Check the parameters */
    692              assert_param(IS_ADC1_ITPENDINGBIT_OK(ITPendingBit));
    693          
    694              if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
    695              {
    696                  /* Clear analog watchdog channel status */
    697                  temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
    698                  if (temp < 8)
    699                  {
    700                      ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
    701                  }
    702                  else
    703                  {
    704                      ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
    705                  }
    706              }
    707              else  /* Clear EOC | AWD flag status */
    708              {
    709                  ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ITPendingBit);
    710              }
    711          }
    712          
    713          /**
    714            * @}
    715            */
    716            
    717          /**
    718            * @}
    719            */
    720            
    721          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label             Bytes
     --------------             -----
     ADC1_DeInit                  49
     ADC1_Init                    44
     ADC1_Cmd                     13
     ADC1_ScanModeCmd             13
     ADC1_DataBufferCmd           13
     ADC1_ITConfig                17
     ADC1_PrescalerConfig         19
     ADC1_SchmittTriggerConfig    78
     ?Subroutine0                  2
     ??Subroutine7_0               6
     ??Subroutine8_0               7
     ADC1_ConversionConfig        47
     ADC1_ExternalTriggerConfig   33
     ADC1_StartConversion          5
     ADC1_GetConversionValue      61
     ADC1_AWDChannelConfig        40
     ADC1_SetHighThreshold        14
     ADC1_SetLowThreshold         11
     ADC1_GetBufferValue          48
     ?Subroutine6                  2
     ?Subroutine1                  7
     ADC1_GetAWDChannelStatus     12
     ?Subroutine2                  7
     ADC1_GetFlagStatus           39
     ?Subroutine5                  9
     ADC1_ClearFlag               43
     ?Subroutine4                 11
     ?Subroutine3                 11
     ADC1_GetITStatus             26
     ADC1_ClearITPendingBit       30

 
 717 bytes in section .near_func.text
 
 717 bytes of CODE memory

Errors: none
Warnings: none
